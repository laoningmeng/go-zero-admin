// Code generated by goctl. DO NOT EDIT.
// Source: admin.proto

package server

import (
	"context"
	"github.com/google/wire"

	"github.com/laoningmeng/go-zero-admin/services/admin/admin"
	"github.com/laoningmeng/go-zero-admin/services/admin/internal/logic"
	"github.com/laoningmeng/go-zero-admin/services/admin/internal/svc"
)

type AdminServer struct {
	svcCtx *svc.ServiceContext
	u *logic.UserLogic
	admin.UnimplementedAdminServer
}

var ProviderSet = wire.NewSet(NewAdminServer)

func NewAdminServer(svcCtx *svc.ServiceContext, userLogic *logic.UserLogic) *AdminServer {
	return &AdminServer{
		svcCtx: svcCtx,
		u: userLogic,
	}
}

func (s *AdminServer) Login(ctx context.Context, req *admin.LoginReq) (*admin.LoginReply, error) {
	userId, err := s.u.Login(ctx, &logic.User{
		Username: req.Username,
		Password: req.Password,
	})
	if err !=nil{
		return nil, err
	}
	return &admin.LoginReply{UserId: userId}, nil
}

func (s *AdminServer) Logout(ctx context.Context, req *admin.LogoutReq) (*admin.LogoutReply, error) {
	isOk, err := s.u.Logout(ctx, &logic.User{
		Id: req.UserId,
	})
	if err !=nil{
		return &admin.LogoutReply{
			IsOk: false,
		},err
	}
	return &admin.LogoutReply{
		IsOk: isOk,
	},nil
}

func(s *AdminServer)UserAdd(ctx context.Context, req *admin.UserAddReq) (*admin.UserAddReply, error){
	userId, err := s.u.UserAdd(ctx, &logic.User{
		Username:     req.Username,
		Password:     req.Password,
		Avatar:       req.Avatar,
		Introduction: req.Introduction,
		RoleId:       req.RoleId,
	})
	if err !=nil{
		return nil, err
	}
	return &admin.UserAddReply{
		Id: userId ,
	},nil
}

func(s *AdminServer)UserUpdate(ctx context.Context, req *admin.UserUpdateReq) (*admin.UserUpdateReply, error){
	user, err := s.u.UserUpdate(ctx, &logic.User{
		Id:           req.Id,
		Username:     req.Username,
		Password:     req.Password,
		Avatar:       req.Avatar,
		Introduction: req.Introduction,
		RoleId:       req.RoleId,
		Status:       req.Status,
	})
	if err !=nil{
		return nil, err
	}
	return &admin.UserUpdateReply{
		Id:           user.Id,
		Username:     user.Username,
		Avatar:       user.Avatar,
		Introduction: user.Introduction,
		RoleId:       user.RoleId,
		RoleName:     user.RoleName,
		Status:       user.Status,
	},nil
}

func(s *AdminServer)UserQuery(ctx context.Context, req *admin.UserQueryReq) (*admin.UserQueryReply, error){
	user, err:=s.u.UserQuery(ctx, &logic.User{
		Id:           0,
		Username:     "",
	})
	if err !=nil{
		return nil,err
	}
	return &admin.UserQueryReply{
		Id:           user.Id,
		Username:     user.Username,
		Avatar:       user.Avatar,
		Introduction: user.Introduction,
		RoleId:       user.RoleId,
		RoleName:     user.RoleName,
		Status:       user.Status,
	},nil
}


func(s *AdminServer)UserList(ctx context.Context,req *admin.UserListReq) (*admin.UserListReply, error){
	list, total,err := s.u.UserList(ctx, &logic.User{
		Username: "",
		RoleId:   0,
		Status:   0,
	}, int(req.Page.Page), int(req.Page.Limit))
	if err !=nil{
		return nil, err
	}
	var data []*admin.UserListReplyDetail
	for _,e:=range list{
		data = append(data, &admin.UserListReplyDetail{
			Id:           e.Id,
			Username:     e.Username,
			Avatar:       e.Avatar,
			Introduction: e.Introduction,
			RoleId:       e.RoleId,
			RoleName:     e.RoleName,
			Status:       e.Status,
		})
	}
	return &admin.UserListReply{Total: total, Data: data},nil
}

func(s *AdminServer)UserDelete(ctx context.Context, req *admin.UserDeleteReq) (*admin.UserDeleteReply, error){
	isDel, err := s.u.UserDelete(ctx, &logic.User{
		Id:       req.Id,
		Username: req.Username,
	})
	if err !=nil{
		return nil, err
	}
	return &admin.UserDeleteReply{
		IsOk: isDel,
	},nil
}