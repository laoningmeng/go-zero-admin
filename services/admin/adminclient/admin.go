// Code generated by goctl. DO NOT EDIT.
// Source: admin.proto

package adminclient

import (
	"context"

	"github.com/laoningmeng/go-zero-admin/services/admin/admin"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Admin interface {
		Login(ctx context.Context, in *admin.LoginReq, opts ...grpc.CallOption) (*admin.LoginReply, error)
		Logout(ctx context.Context, in *admin.LogoutReq, opts ...grpc.CallOption) (*admin.LogoutReply, error)
		UserAdd(ctx context.Context, in *admin.UserAddReq, opts ...grpc.CallOption) (*admin.UserAddReply, error)
		UserUpdate(ctx context.Context, in *admin.UserUpdateReq, opts ...grpc.CallOption) (*admin.UserUpdateReply, error)
		UserQuery(ctx context.Context, in *admin.UserQueryReq, opts ...grpc.CallOption) (*admin.UserQueryReply, error)
		UserList(ctx context.Context, in *admin.UserListReq, opts ...grpc.CallOption) (*admin.UserListReply, error)
		UserDelete(ctx context.Context, in *admin.UserDeleteReq, opts ...grpc.CallOption) (*admin.UserDeleteReply, error)
		//角色管理
		RoleAdd(ctx context.Context, in *admin.RoleAddReq, opts ...grpc.CallOption) (*admin.RoleAddReply, error)
		RoleUpdate(ctx context.Context, in *admin.RoleUpdateReq, opts ...grpc.CallOption) (*admin.RoleUpdateReply, error)
		RoleQuery(ctx context.Context, in *admin.RoleQueryReq, opts ...grpc.CallOption) (*admin.RoleQueryReply, error)
		RoleList(ctx context.Context, in *admin.RoleListReq, opts ...grpc.CallOption) (*admin.RoleListReply, error)
		RoleDelete(ctx context.Context, in *admin.RoleDeleteReq, opts ...grpc.CallOption) (*admin.RoleDeleteReply, error)
	}

	defaultAdmin struct {
		cli zrpc.Client
	}
)

func NewAdmin(cli zrpc.Client) Admin {
	return &defaultAdmin{
		cli: cli,
	}
}

func (m *defaultAdmin) Login(ctx context.Context, in *admin.LoginReq, opts ...grpc.CallOption) (*admin.LoginReply, error) {
	client := admin.NewAdminClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultAdmin) Logout(ctx context.Context, in *admin.LogoutReq, opts ...grpc.CallOption) (*admin.LogoutReply, error) {
	client := admin.NewAdminClient(m.cli.Conn())
	return client.Logout(ctx, in, opts...)
}

func (m *defaultAdmin) UserAdd(ctx context.Context, in *admin.UserAddReq, opts ...grpc.CallOption) (*admin.UserAddReply, error) {
	client := admin.NewAdminClient(m.cli.Conn())
	return client.UserAdd(ctx, in, opts...)
}

func (m *defaultAdmin) UserUpdate(ctx context.Context, in *admin.UserUpdateReq, opts ...grpc.CallOption) (*admin.UserUpdateReply, error) {
	client := admin.NewAdminClient(m.cli.Conn())
	return client.UserUpdate(ctx, in, opts...)
}

func (m *defaultAdmin) UserQuery(ctx context.Context, in *admin.UserQueryReq, opts ...grpc.CallOption) (*admin.UserQueryReply, error) {
	client := admin.NewAdminClient(m.cli.Conn())
	return client.UserQuery(ctx, in, opts...)
}

func (m *defaultAdmin) UserList(ctx context.Context, in *admin.UserListReq, opts ...grpc.CallOption) (*admin.UserListReply, error) {
	client := admin.NewAdminClient(m.cli.Conn())
	return client.UserList(ctx, in, opts...)
}

func (m *defaultAdmin) UserDelete(ctx context.Context, in *admin.UserDeleteReq, opts ...grpc.CallOption) (*admin.UserDeleteReply, error) {
	client := admin.NewAdminClient(m.cli.Conn())
	return client.UserDelete(ctx, in, opts...)
}

func (m *defaultAdmin) RoleAdd(ctx context.Context, in *admin.RoleAddReq, opts ...grpc.CallOption) (*admin.RoleAddReply, error) {
	client := admin.NewAdminClient(m.cli.Conn())
	return client.RoleAdd(ctx, in, opts...)
}

func (m *defaultAdmin) RoleUpdate(ctx context.Context, in *admin.RoleUpdateReq, opts ...grpc.CallOption) (*admin.RoleUpdateReply, error) {
	client := admin.NewAdminClient(m.cli.Conn())
	return client.RoleUpdate(ctx, in, opts...)
}

func (m *defaultAdmin) RoleQuery(ctx context.Context, in *admin.RoleQueryReq, opts ...grpc.CallOption) (*admin.RoleQueryReply, error) {
	client := admin.NewAdminClient(m.cli.Conn())
	return client.RoleQuery(ctx, in, opts...)
}

func (m *defaultAdmin) RoleList(ctx context.Context, in *admin.RoleListReq, opts ...grpc.CallOption) (*admin.RoleListReply, error) {
	client := admin.NewAdminClient(m.cli.Conn())
	return client.RoleList(ctx, in, opts...)
}

func (m *defaultAdmin) RoleDelete(ctx context.Context, in *admin.RoleDeleteReq, opts ...grpc.CallOption) (*admin.RoleDeleteReply, error) {
	client := admin.NewAdminClient(m.cli.Conn())
	return client.RoleDelete(ctx, in, opts...)
}
